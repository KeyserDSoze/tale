---
import { getCollection } from 'astro:content';
import { createLangUrl } from '../utils/urls';
import { t } from '../i18n';

interface Props {
  currentStory: any;
  lang: string;
  type: 'story' | 'comic';
  isLastChapter?: boolean;
}

const { currentStory, lang, type, isLastChapter = false } = Astro.props;
const _ = (k: string) => t(lang as any, k);

// Get all stories/comics of the same type and language
const allStories = await getCollection('stories', ({ data }) => 
  data.type === type && data.lang === lang
);

// Filter stories with the same taleid (series) - only if taleid exists
const currentTaleid = currentStory.data.taleid;
let showNavigation = false;
let nextStory = null;
let previousStory = null;
let sortedSeries: any[] = [];

if (currentTaleid) {
  const seriesStories = allStories.filter(story => 
    story.data.taleid === currentTaleid
  );

  // Sort by chapter number first, then by date
  sortedSeries = seriesStories.sort((a, b) => {
    // Priority 1: chapter number
    if (a.data.chapter !== undefined && b.data.chapter !== undefined) {
      return a.data.chapter - b.data.chapter;
    }
    // Priority 2: date
    return new Date(a.data.date).getTime() - new Date(b.data.date).getTime();
  });

  // Find current story index
  const currentIndex = sortedSeries.findIndex(story => {
    const storyId = story.data.id || story.id;
    const currentId = currentStory.data.id || currentStory.id;
    return storyId === currentId;
  });

  // Get next and previous stories
  nextStory = currentIndex !== -1 && currentIndex < sortedSeries.length - 1 
    ? sortedSeries[currentIndex + 1] 
    : null;
    
  previousStory = currentIndex !== -1 && currentIndex > 0 
    ? sortedSeries[currentIndex - 1] 
    : null;

  // Only show navigation if there are multiple stories in the series
  showNavigation = sortedSeries.length > 1;
}
---

{showNavigation && (
  <div class="chapter-navigation border-t border-gray-200 dark:border-gray-700">
    <div class="nav-container">
      <div class="navigation-row">
       

        {/* Right side - Previous/Next chapter navigation */}
        <div class="nav-right">
          <div class="chapter-buttons">
            {previousStory && (
              <a href={createLangUrl(lang, `/${type === 'story' ? 'stories' : 'comics'}/${(previousStory as any).data.id || (previousStory as any).id}`)} class="prev-button">
                <svg class="prev-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="m15 18-6-6 6-6"/>
                </svg>
                <span class="button-text">{_(type === 'story' ? 'chapter.previousChapter' : 'chapter.previousComic')}</span>
              </a>
            )}
            {nextStory ? (
              <a href={createLangUrl(lang, `/${type === 'story' ? 'stories' : 'comics'}/${(nextStory as any).data.id || (nextStory as any).id}`)} class="next-button">
                <span class="button-text">{_(type === 'story' ? 'chapter.nextChapter' : 'chapter.nextComic')}</span>
                <svg class="next-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="m9 18 6-6-6-6"/>
                </svg>
              </a>
            ) : (
              <div class="end-text"></div>
            )}
          </div>
        </div>
         {/* Left side - Back links */}
        <div class="nav-left">
          {currentStory.data.taleid && (
            <a 
              href={createLangUrl(lang, `/series/${currentStory.data.taleid}`)}
              class="nav-link"
            >
              ðŸ“š {_('nav.backToSerie')}
            </a>
          )}
          <a 
            href={createLangUrl(lang, `/${type === 'story' ? 'stories' : 'comics'}`)}
            class="nav-link"
          >
            ðŸ”– {_(`nav.backTo${type === 'story' ? 'Stories' : 'Comics'}`)}
          </a>
        </div>
      </div>
    </div>
  </div>
)}

<style>
  .chapter-navigation {
    margin-top: 3rem;
    padding: 2rem 0;
  }

  .nav-container {
    max-width: 64rem;
    margin: 0 auto;
    padding: 0 1rem;
  }

  .navigation-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 2rem;
    flex-wrap: wrap;
  }

  .nav-left {
    display: flex;
    align-items: center;
    gap: 1.5rem;
    flex-wrap: wrap;
  }

  .nav-right {
    display: flex;
    align-items: center;
  }

  .chapter-buttons {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .nav-link {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-radius: 0.5rem;
    text-decoration: none;
    font-weight: 500;
    transition: all 0.3s ease;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    font-size: 0.95rem;
    min-height: 44px;
    justify-content: center;
  }

  .nav-link:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
    background: linear-gradient(135deg, #5a67d8 0%, #6b46c1 100%);
    color: white;
  }

  .dark .nav-link {
    color: white;
  }

  .dark .nav-link:hover {
    color: white;
  }

  .prev-button,
  .next-button {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-radius: 0.5rem;
    text-decoration: none;
    font-weight: 500;
    transition: all 0.3s ease;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    font-size: 0.95rem;
    min-height: 44px;
    justify-content: center;
  }

  .prev-button:hover,
  .next-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
    background: linear-gradient(135deg, #5a67d8 0%, #6b46c1 100%);
  }

  .button-text {
    font-size: 0.95rem;
    white-space: nowrap;
  }

  .prev-icon,
  .next-icon {
    transition: transform 0.2s ease;
    flex-shrink: 0;
    width: 20px;
    height: 20px;
  }

  .prev-button:hover .prev-icon {
    transform: translateX(-2px);
  }

  .next-button:hover .next-icon {
    transform: translateX(2px);
  }

  .end-text {
    color: rgb(107 114 128);
    font-style: italic;
    font-size: 0.95rem;
  }

  .dark .end-text {
    color: rgb(156 163 175);
  }

  /* Mobile responsiveness */
  @media (max-width: 768px) {
    .navigation-row {
      flex-direction: column;
      text-align: center;
      gap: 1.5rem;
    }

    .nav-left {
      justify-content: center;
      gap: 1rem;
    }

    .nav-link {
      font-size: 0.9rem;
    }

    .next-button {
      padding: 0.65rem 1.25rem;
    }

    .nav-link {
      font-size: 0.9rem;
      padding: 0.65rem 1.25rem;
      min-height: 40px;
    }

    .prev-button,
    .next-button {
      padding: 0.65rem 1.25rem;
      font-size: 0.9rem;
      min-height: 40px;
    }

    .chapter-buttons {
      justify-content: center;
      flex-wrap: wrap;
      gap: 0.75rem;
    }

    .button-text {
      font-size: 0.9rem;
    }

    .button-text {
      font-size: 0.9rem;
    }
  }

  @media (max-width: 480px) {
    .nav-left {
      flex-direction: column;
      gap: 0.75rem;
    }
  }
</style>
