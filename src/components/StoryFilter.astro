---
import { storyGenres, type StoryGenre } from '../content.config';

interface Props {
  lang: string;
  currentGenre?: string;
  currentSort?: string;
  currentSearch?: string;
  currentGrouped?: string;
}

const { lang, currentGenre = 'all', currentSort = 'date', currentSearch = '', currentGrouped = 'true' } = Astro.props;

// Genre labels for different languages
const genreLabels: Record<string, Record<string, string>> = {
  it: {
    all: 'Tutti i generi',
    fantasy: 'Fantasy',
    sciencefiction: 'Fantascienza',
    horror: 'Horror',
    thriller: 'Thriller',
    mystery: 'Mistero',
    crime: 'Crime',
    adventure: 'Avventura',
    romance: 'Romance',
    historicalfiction: 'Fiction storica',
    contemporaryfiction: 'Fiction contemporanea',
    satire: 'Satira',
    comedy: 'Commedia',
    drama: 'Drama',
    fairytale: 'Fiaba',
    allegory: 'Allegoria',
    children: 'Per bambini',
    middlegrade: 'Ragazzi',
    youngadult: 'Young Adult',
    newadult: 'New Adult',
    adult: 'Adulti',
    biography: 'Biografia',
    autobiography: 'Autobiografia',
    memoir: 'Memoir',
    essay: 'Saggio',
    philosophy: 'Filosofia',
    science: 'Scienza',
    history: 'Storia',
    politics: 'Politica',
    selfhelp: 'Auto-aiuto',
    manual: 'Manuale',
    poetry: 'Poesia',
    diary: 'Diario',
    epistolary: 'Epistolare',
    superhero: 'Supereroi',
    graphicnovel: 'Graphic novel',
    sliceoflife: 'Slice of life',
    comedycomic: 'Fumetto comico',
    satiricalcomic: 'Fumetto satirico',
    historicalcomic: 'Fumetto storico',
    fantasycomic: 'Fumetto fantasy',
    scificomic: 'Fumetto sci-fi',
    mysterycomic: 'Fumetto mistero',
    horrorcomic: 'Fumetto horror',
    adventurecomic: 'Fumetto avventura',
    romancecomic: 'Fumetto romance',
    psychological: 'Psicologico',
    dark: 'Dark',
    experimental: 'Sperimentale',
    realistic: 'Realistico',
    surreal: 'Surreale',
    dystopian: 'Distopico',
    utopian: 'Utopico',
    postapocalyptic: 'Post-apocalittico',
    cyberpunk: 'Cyberpunk',
    steampunk: 'Steampunk',
    anthology: 'Antologia',
    shortstory: 'Racconto breve',
    flashfiction: 'Flash fiction',
    lightnovel: 'Light novel',
    webcomic: 'Webcomic'
  },
  en: {
    all: 'All genres',
    fantasy: 'Fantasy',
    sciencefiction: 'Science Fiction',
    horror: 'Horror',
    thriller: 'Thriller',
    mystery: 'Mystery',
    crime: 'Crime',
    adventure: 'Adventure',
    romance: 'Romance',
    historicalfiction: 'Historical Fiction',
    contemporaryfiction: 'Contemporary Fiction',
    satire: 'Satire',
    comedy: 'Comedy',
    drama: 'Drama',
    fairytale: 'Fairy Tale',
    allegory: 'Allegory',
    children: 'Children',
    middlegrade: 'Middle Grade',
    youngadult: 'Young Adult',
    newadult: 'New Adult',
    adult: 'Adult',
    biography: 'Biography',
    autobiography: 'Autobiography',
    memoir: 'Memoir',
    essay: 'Essay',
    philosophy: 'Philosophy',
    science: 'Science',
    history: 'History',
    politics: 'Politics',
    selfhelp: 'Self Help',
    manual: 'Manual',
    poetry: 'Poetry',
    diary: 'Diary',
    epistolary: 'Epistolary',
    superhero: 'Superhero',
    graphicnovel: 'Graphic Novel',
    sliceoflife: 'Slice of Life',
    comedycomic: 'Comedy Comic',
    satiricalcomic: 'Satirical Comic',
    historicalcomic: 'Historical Comic',
    fantasycomic: 'Fantasy Comic',
    scificomic: 'Sci-Fi Comic',
    mysterycomic: 'Mystery Comic',
    horrorcomic: 'Horror Comic',
    adventurecomic: 'Adventure Comic',
    romancecomic: 'Romance Comic',
    psychological: 'Psychological',
    dark: 'Dark',
    experimental: 'Experimental',
    realistic: 'Realistic',
    surreal: 'Surreal',
    dystopian: 'Dystopian',
    utopian: 'Utopian',
    postapocalyptic: 'Post-Apocalyptic',
    cyberpunk: 'Cyberpunk',
    steampunk: 'Steampunk',
    anthology: 'Anthology',
    shortstory: 'Short Story',
    flashfiction: 'Flash Fiction',
    lightnovel: 'Light Novel',
    webcomic: 'Webcomic'
  },
  es: {
    all: 'Todos los géneros',
    fantasy: 'Fantasía',
    sciencefiction: 'Ciencia Ficción',
    horror: 'Horror',
    thriller: 'Thriller',
    mystery: 'Misterio',
    crime: 'Crimen',
    adventure: 'Aventura',
    romance: 'Romance',
    historicalfiction: 'Ficción Histórica',
    contemporaryfiction: 'Ficción Contemporánea',
    satire: 'Sátira',
    comedy: 'Comedia',
    drama: 'Drama',
    fairytale: 'Cuento de Hadas',
    allegory: 'Alegoría',
    children: 'Infantil',
    middlegrade: 'Juvenil',
    youngadult: 'Joven Adulto',
    newadult: 'Nuevo Adulto',
    adult: 'Adulto',
    biography: 'Biografía',
    autobiography: 'Autobiografía',
    memoir: 'Memorias',
    essay: 'Ensayo',
    philosophy: 'Filosofía',
    science: 'Ciencia',
    history: 'Historia',
    politics: 'Política',
    selfhelp: 'Autoayuda',
    manual: 'Manual',
    poetry: 'Poesía',
    diary: 'Diario',
    epistolary: 'Epistolar',
    superhero: 'Superhéroe',
    graphicnovel: 'Novela Gráfica',
    sliceoflife: 'Slice of Life',
    comedycomic: 'Cómic de Comedia',
    satiricalcomic: 'Cómic Satírico',
    historicalcomic: 'Cómic Histórico',
    fantasycomic: 'Cómic de Fantasía',
    scificomic: 'Cómic de Sci-Fi',
    mysterycomic: 'Cómic de Misterio',
    horrorcomic: 'Cómic de Horror',
    adventurecomic: 'Cómic de Aventura',
    romancecomic: 'Cómic de Romance',
    psychological: 'Psicológico',
    dark: 'Oscuro',
    experimental: 'Experimental',
    realistic: 'Realista',
    surreal: 'Surrealista',
    dystopian: 'Distópico',
    utopian: 'Utópico',
    postapocalyptic: 'Post-Apocalíptico',
    cyberpunk: 'Cyberpunk',
    steampunk: 'Steampunk',
    anthology: 'Antología',
    shortstory: 'Cuento Corto',
    flashfiction: 'Flash Fiction',
    lightnovel: 'Light Novel',
    webcomic: 'Webcomic'
  },
  fr: {
    all: 'Tous les genres',
    fantasy: 'Fantasy',
    sciencefiction: 'Science-Fiction',
    horror: 'Horreur',
    thriller: 'Thriller',
    mystery: 'Mystère',
    crime: 'Crime',
    adventure: 'Aventure',
    romance: 'Romance',
    historicalfiction: 'Fiction Historique',
    contemporaryfiction: 'Fiction Contemporaine',
    satire: 'Satire',
    comedy: 'Comédie',
    drama: 'Drame',
    fairytale: 'Conte de Fées',
    allegory: 'Allégorie',
    children: 'Enfants',
    middlegrade: 'Pré-adolescent',
    youngadult: 'Jeune Adulte',
    newadult: 'Nouvel Adulte',
    adult: 'Adulte',
    biography: 'Biographie',
    autobiography: 'Autobiographie',
    memoir: 'Mémoires',
    essay: 'Essai',
    philosophy: 'Philosophie',
    science: 'Science',
    history: 'Histoire',
    politics: 'Politique',
    selfhelp: 'Développement Personnel',
    manual: 'Manuel',
    poetry: 'Poésie',
    diary: 'Journal',
    epistolary: 'Épistolaire',
    superhero: 'Super-héros',
    graphicnovel: 'Roman Graphique',
    sliceoflife: 'Tranche de Vie',
    comedycomic: 'BD Comique',
    satiricalcomic: 'BD Satirique',
    historicalcomic: 'BD Historique',
    fantasycomic: 'BD Fantasy',
    scificomic: 'BD Sci-Fi',
    mysterycomic: 'BD Mystère',
    horrorcomic: 'BD Horreur',
    adventurecomic: 'BD Aventure',
    romancecomic: 'BD Romance',
    psychological: 'Psychologique',
    dark: 'Sombre',
    experimental: 'Expérimental',
    realistic: 'Réaliste',
    surreal: 'Surréaliste',
    dystopian: 'Dystopique',
    utopian: 'Utopique',
    postapocalyptic: 'Post-Apocalyptique',
    cyberpunk: 'Cyberpunk',
    steampunk: 'Steampunk',
    anthology: 'Anthologie',
    shortstory: 'Nouvelle',
    flashfiction: 'Flash Fiction',
    lightnovel: 'Light Novel',
    webcomic: 'Webcomic'
  },
  de: {
    all: 'Alle Genres',
    fantasy: 'Fantasy',
    sciencefiction: 'Science Fiction',
    horror: 'Horror',
    thriller: 'Thriller',
    mystery: 'Mystery',
    crime: 'Krimi',
    adventure: 'Abenteuer',
    romance: 'Romance',
    historicalfiction: 'Historische Fiktion',
    contemporaryfiction: 'Zeitgenössische Fiktion',
    satire: 'Satire',
    comedy: 'Komödie',
    drama: 'Drama',
    fairytale: 'Märchen',
    allegory: 'Allegorie',
    children: 'Kinder',
    middlegrade: 'Jugend',
    youngadult: 'Young Adult',
    newadult: 'New Adult',
    adult: 'Erwachsene',
    biography: 'Biografie',
    autobiography: 'Autobiografie',
    memoir: 'Memoiren',
    essay: 'Essay',
    philosophy: 'Philosophie',
    science: 'Wissenschaft',
    history: 'Geschichte',
    politics: 'Politik',
    selfhelp: 'Selbsthilfe',
    manual: 'Handbuch',
    poetry: 'Poesie',
    diary: 'Tagebuch',
    epistolary: 'Briefroman',
    superhero: 'Superheld',
    graphicnovel: 'Graphic Novel',
    sliceoflife: 'Slice of Life',
    comedycomic: 'Comedy-Comic',
    satiricalcomic: 'Satirischer Comic',
    historicalcomic: 'Historischer Comic',
    fantasycomic: 'Fantasy-Comic',
    scificomic: 'Sci-Fi-Comic',
    mysterycomic: 'Mystery-Comic',
    horrorcomic: 'Horror-Comic',
    adventurecomic: 'Abenteuer-Comic',
    romancecomic: 'Romance-Comic',
    psychological: 'Psychologisch',
    dark: 'Dark',
    experimental: 'Experimentell',
    realistic: 'Realistisch',
    surreal: 'Surreal',
    dystopian: 'Dystopisch',
    utopian: 'Utopisch',
    postapocalyptic: 'Post-Apokalyptisch',
    cyberpunk: 'Cyberpunk',
    steampunk: 'Steampunk',
    anthology: 'Anthologie',
    shortstory: 'Kurzgeschichte',
    flashfiction: 'Flash Fiction',
    lightnovel: 'Light Novel',
    webcomic: 'Webcomic'
  },
  zh: {
    all: '所有类型',
    fantasy: '奇幻',
    sciencefiction: '科幻',
    horror: '恐怖',
    thriller: '惊悚',
    mystery: '悬疑',
    crime: '犯罪',
    adventure: '冒险',
    romance: '爱情',
    historicalfiction: '历史小说',
    contemporaryfiction: '当代小说',
    satire: '讽刺',
    comedy: '喜剧',
    drama: '戏剧',
    fairytale: '童话',
    allegory: '寓言',
    children: '儿童',
    middlegrade: '中年级',
    youngadult: '青少年',
    newadult: '新成人',
    adult: '成人',
    biography: '传记',
    autobiography: '自传',
    memoir: '回忆录',
    essay: '散文',
    philosophy: '哲学',
    science: '科学',
    history: '历史',
    politics: '政治',
    selfhelp: '自助',
    manual: '手册',
    poetry: '诗歌',
    diary: '日记',
    epistolary: '书信体',
    superhero: '超级英雄',
    graphicnovel: '图像小说',
    sliceoflife: '生活片段',
    comedycomic: '喜剧漫画',
    satiricalcomic: '讽刺漫画',
    historicalcomic: '历史漫画',
    fantasycomic: '奇幻漫画',
    scificomic: '科幻漫画',
    mysterycomic: '悬疑漫画',
    horrorcomic: '恐怖漫画',
    adventurecomic: '冒险漫画',
    romancecomic: '爱情漫画',
    psychological: '心理',
    dark: '黑暗',
    experimental: '实验性',
    realistic: '现实主义',
    surreal: '超现实',
    dystopian: '反乌托邦',
    utopian: '乌托邦',
    postapocalyptic: '后启示录',
    cyberpunk: '赛博朋克',
    steampunk: '蒸汽朋克',
    anthology: '选集',
    shortstory: '短篇小说',
    flashfiction: '闪小说',
    lightnovel: '轻小说',
    webcomic: '网络漫画'
  },
  ja: {
    all: 'すべてのジャンル',
    fantasy: 'ファンタジー',
    sciencefiction: 'SF',
    horror: 'ホラー',
    thriller: 'スリラー',
    mystery: 'ミステリー',
    crime: 'クライム',
    adventure: 'アドベンチャー',
    romance: 'ロマンス',
    historicalfiction: '歴史小説',
    contemporaryfiction: '現代小説',
    satire: '風刺',
    comedy: 'コメディ',
    drama: 'ドラマ',
    fairytale: '童話',
    allegory: '寓話',
    children: '児童',
    middlegrade: '中学年',
    youngadult: 'ヤングアダルト',
    newadult: 'ニューアダルト',
    adult: '大人',
    biography: '伝記',
    autobiography: '自伝',
    memoir: '回想録',
    essay: 'エッセイ',
    philosophy: '哲学',
    science: '科学',
    history: '歴史',
    politics: '政治',
    selfhelp: '自己啓発',
    manual: 'マニュアル',
    poetry: '詩',
    diary: '日記',
    epistolary: '書簡体',
    superhero: 'スーパーヒーロー',
    graphicnovel: 'グラフィックノベル',
    sliceoflife: '日常系',
    comedycomic: 'コメディ漫画',
    satiricalcomic: '風刺漫画',
    historicalcomic: '歴史漫画',
    fantasycomic: 'ファンタジー漫画',
    scificomic: 'SF漫画',
    mysterycomic: 'ミステリー漫画',
    horrorcomic: 'ホラー漫画',
    adventurecomic: 'アドベンチャー漫画',
    romancecomic: 'ロマンス漫画',
    psychological: '心理的',
    dark: 'ダーク',
    experimental: '実験的',
    realistic: 'リアリスティック',
    surreal: 'シュルレアル',
    dystopian: 'ディストピア',
    utopian: 'ユートピア',
    postapocalyptic: 'ポストアポカリプス',
    cyberpunk: 'サイバーパンク',
    steampunk: 'スチームパンク',
    anthology: 'アンソロジー',
    shortstory: 'ショートストーリー',
    flashfiction: 'フラッシュフィクション',
    lightnovel: 'ライトノベル',
    webcomic: 'ウェブコミック'
  }
};

const getGenreLabel = (genre: string) => {
  return genreLabels[lang]?.[genre] || genreLabels['en']?.[genre] || genre;
};

const sortLabels = {
  it: {
    date: 'Data',
    title: 'Titolo',
    author: 'Autore'
  },
  en: {
    date: 'Date',
    title: 'Title', 
    author: 'Author'
  },
  es: {
    date: 'Fecha',
    title: 'Título',
    author: 'Autor'
  },
  fr: {
    date: 'Date',
    title: 'Titre',
    author: 'Auteur'
  },
  de: {
    date: 'Datum',
    title: 'Titel',
    author: 'Autor'
  },
  zh: {
    date: '日期',
    title: '标题',
    author: '作者'
  },
  ja: {
    date: '日付',
    title: 'タイトル',
    author: '著者'
  }
};

const getSortLabel = (sort: string) => {
  const langLabels = sortLabels[lang as keyof typeof sortLabels] || sortLabels['en'];
  return langLabels[sort as keyof typeof langLabels] || sort;
};

const labels = {
  it: {
    searchPlaceholder: 'Cerca per titolo o autore...',
    genre: 'Genere:',
    sortBy: 'Ordina per:',
    groupBySeries: 'Raggruppa per serie',
    clearFilters: 'Pulisci filtri'
  },
  en: {
    searchPlaceholder: 'Search by title or author...',
    genre: 'Genre:',
    sortBy: 'Sort by:',
    groupBySeries: 'Group by series',
    clearFilters: 'Clear filters'
  },
  es: {
    searchPlaceholder: 'Buscar por título o autor...',
    genre: 'Género:',
    sortBy: 'Ordenar por:',
    groupBySeries: 'Agrupar por serie',
    clearFilters: 'Limpiar filtros'
  },
  fr: {
    searchPlaceholder: 'Rechercher par titre ou auteur...',
    genre: 'Genre:',
    sortBy: 'Trier par:',
    groupBySeries: 'Grouper par série',
    clearFilters: 'Effacer les filtres'
  },
  de: {
    searchPlaceholder: 'Nach Titel oder Autor suchen...',
    genre: 'Genre:',
    sortBy: 'Sortieren nach:',
    groupBySeries: 'Nach Serie gruppieren',
    clearFilters: 'Filter löschen'
  },
  zh: {
    searchPlaceholder: '按标题或作者搜索...',
    genre: '类型:',
    sortBy: '排序:',
    groupBySeries: '按系列分组',
    clearFilters: '清除过滤器'
  },
  ja: {
    searchPlaceholder: 'タイトルまたは著者で検索...',
    genre: 'ジャンル:',
    sortBy: '並び順:',
    groupBySeries: 'シリーズごとにグループ化',
    clearFilters: 'フィルターをクリア'
  }
};

const getLabel = (key: string) => {
  const langLabels = labels[lang as keyof typeof labels] || labels['en'];
  return langLabels[key as keyof typeof langLabels] || labels['en'][key as keyof typeof labels['en']];
};
---

<div class="story-filters">
  <div class="filters-row">
    <!-- Search -->
    <div class="search-box">
      <input 
        type="text" 
        id="search-input" 
        placeholder={getLabel('searchPlaceholder')}
        value={currentSearch}
        class="search-input"
      />
      <svg class="search-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <circle cx="11" cy="11" r="8"></circle>
        <path d="m21 21-4.35-4.35"></path>
      </svg>
    </div>

    <!-- Genre Filter -->
    <div class="filter-group">
      <label for="genre-select">{getLabel('genre')}</label>
      <select id="genre-select" class="filter-select">
        <option value="all" selected={currentGenre === 'all'}>{getGenreLabel('all')}</option>
        {storyGenres.map((genre) => (
          <option value={genre} selected={currentGenre === genre}>
            {getGenreLabel(genre)}
          </option>
        ))}
      </select>
    </div>

    <!-- Sort -->
    <div class="filter-group">
      <label for="sort-select">{getLabel('sortBy')}</label>
      <select id="sort-select" class="filter-select">
        <option value="date" selected={currentSort === 'date'}>{getSortLabel('date')}</option>
        <option value="title" selected={currentSort === 'title'}>{getSortLabel('title')}</option>
        <option value="author" selected={currentSort === 'author'}>{getSortLabel('author')}</option>
      </select>
    </div>

    <!-- Group by Series -->
    <div class="filter-group">
      <label class="checkbox-label">
        <input 
          type="checkbox" 
          id="grouped-checkbox" 
          checked={currentGrouped === 'true'}
          class="grouped-checkbox"
        />
        <span class="checkbox-text">
          {getLabel('groupBySeries')}
        </span>
      </label>
    </div>

    <!-- Clear Filters -->
    <button id="clear-filters" class="clear-btn">
      {getLabel('clearFilters')}
    </button>
  </div>
</div>

<style>
  .story-filters {
    background: white;
    dark:bg-gray-800;
    border: 1px solid rgb(229, 231, 235);
    border-radius: 0.75rem;
    padding: 1.5rem;
    margin-bottom: 2rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
  }

  :global(.dark) .story-filters {
    background: rgb(31, 41, 55);
    border-color: rgb(75, 85, 99);
  }

  .filters-row {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    align-items: end;
  }

  .search-box {
    position: relative;
    flex: 1;
    min-width: 250px;
  }

  .search-input {
    width: 100%;
    padding: 0.75rem 2.5rem 0.75rem 1rem;
    border: 1px solid rgb(209, 213, 219);
    border-radius: 0.5rem;
    font-size: 0.875rem;
    transition: all 0.3s ease;
  }

  .search-input:focus {
    outline: none;
    border-color: rgb(147, 51, 234);
    box-shadow: 0 0 0 3px rgba(147, 51, 234, 0.1);
  }

  :global(.dark) .search-input {
    background: rgb(55, 65, 81);
    border-color: rgb(75, 85, 99);
    color: white;
  }

  .search-icon {
    position: absolute;
    right: 0.75rem;
    top: 50%;
    transform: translateY(-50%);
    color: rgb(156, 163, 175);
    pointer-events: none;
  }

  .filter-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .filter-group label {
    font-size: 0.875rem;
    font-weight: 500;
    color: rgb(55, 65, 81);
  }

  :global(.dark) .filter-group label {
    color: rgb(229, 231, 235);
  }

  .filter-select {
    padding: 0.75rem;
    border: 1px solid rgb(209, 213, 219);
    border-radius: 0.5rem;
    font-size: 0.875rem;
    background: white;
    cursor: pointer;
    transition: all 0.3s ease;
    min-width: 150px;
  }

  .filter-select:focus {
    outline: none;
    border-color: rgb(147, 51, 234);
    box-shadow: 0 0 0 3px rgba(147, 51, 234, 0.1);
  }

  :global(.dark) .filter-select {
    background: rgb(55, 65, 81);
    border-color: rgb(75, 85, 99);
    color: white;
  }

  .clear-btn {
    padding: 0.75rem 1.5rem;
    background: rgb(107, 114, 128);
    color: white;
    border: none;
    border-radius: 0.5rem;
    font-size: 0.875rem;
    cursor: pointer;
    transition: all 0.3s ease;
    white-space: nowrap;
  }

  .clear-btn:hover {
    background: rgb(75, 85, 99);
  }

  .checkbox-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    font-size: 0.875rem;
    color: rgb(55, 65, 81);
  }

  :global(.dark) .checkbox-label {
    color: rgb(229, 231, 235);
  }

  .grouped-checkbox {
    width: 1rem;
    height: 1rem;
    accent-color: rgb(147, 51, 234);
  }

  .checkbox-text {
    user-select: none;
  }

  @media (max-width: 768px) {
    .filters-row {
      flex-direction: column;
      align-items: stretch;
    }

    .search-box {
      min-width: unset;
    }

    .filter-group {
      flex-direction: row;
      align-items: center;
      justify-content: space-between;
    }

    .filter-select {
      min-width: 120px;
    }
  }
</style>

<script>
  // Client-side filtering functionality
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const genreSelect = document.getElementById('genre-select') as HTMLSelectElement;
    const sortSelect = document.getElementById('sort-select') as HTMLSelectElement;
    const groupedCheckbox = document.getElementById('grouped-checkbox') as HTMLInputElement;
    const clearBtn = document.getElementById('clear-filters');

    function updateURL() {
      const params = new URLSearchParams();
      
      if (searchInput.value.trim()) {
        params.set('search', searchInput.value.trim());
      }
      
      if (genreSelect.value !== 'all') {
        params.set('genre', genreSelect.value);
      }
      
      if (sortSelect.value !== 'date') {
        params.set('sort', sortSelect.value);
      }

      if (!groupedCheckbox.checked) {
        params.set('grouped', 'false');
      }

      const newURL = window.location.pathname + (params.toString() ? '?' + params.toString() : '');
      window.history.replaceState({}, '', newURL);
      
      // Trigger custom event for story list to update
      window.dispatchEvent(new CustomEvent('filtersChanged', {
        detail: {
          search: searchInput.value.trim(),
          genre: genreSelect.value,
          sort: sortSelect.value,
          grouped: groupedCheckbox.checked
        }
      }));
    }

    // Event listeners
    if (searchInput) {
      searchInput.addEventListener('input', () => {
        clearTimeout(parseInt(searchInput.dataset.timeout || '0'));
        searchInput.dataset.timeout = String(setTimeout(() => updateURL(), 300));
      });
    }

    if (genreSelect) {
      genreSelect.addEventListener('change', updateURL);
    }

    if (sortSelect) {
      sortSelect.addEventListener('change', updateURL);
    }

    if (groupedCheckbox) {
      groupedCheckbox.addEventListener('change', updateURL);
    }

    if (clearBtn) {
      clearBtn.addEventListener('click', () => {
        searchInput.value = '';
        genreSelect.value = 'all';
        sortSelect.value = 'date';
        groupedCheckbox.checked = true;
        updateURL();
      });
    }

    // Load URL parameters on page load
    const urlParams = new URLSearchParams(window.location.search);
    const searchParam = urlParams.get('search');
    const genreParam = urlParams.get('genre');
    const sortParam = urlParams.get('sort');
    const groupedParam = urlParams.get('grouped');
    
    if (searchParam) {
      searchInput.value = searchParam;
    }
    if (genreParam) {
      genreSelect.value = genreParam;
    }
    if (sortParam) {
      sortSelect.value = sortParam;
    }
    if (groupedParam === 'false') {
      groupedCheckbox.checked = false;
    }
  });
</script>
