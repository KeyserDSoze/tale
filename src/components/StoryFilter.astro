---
import { storyGenres, type StoryGenre } from '../content.config';
import { t } from '../i18n';

interface Props {
  lang: string;
  currentGenre?: string;
  currentSort?: string;
  currentSearch?: string;
  currentGrouped?: string;
}

const { lang, currentGenre = 'all', currentSort = 'date', currentSearch = '', currentGrouped = 'true' } = Astro.props;
const _ = (k: string) => t(lang as any, k);


const getGenreLabel = (genre: string) => {
  return _(`genres.${genre}`) || genre;
};

const getSortLabel = (sort: string) => {
  return _(`sort.${sort}`) || sort;
};

const getLabel = (key: string) => {
  return _(`filters.${key}`) || key;
};
---

<div class="story-filters">
  <div class="filters-row">
    <!-- Search -->
    <div class="search-box">
      <input 
        type="text" 
        id="search-input" 
        placeholder={getLabel('searchPlaceholder')}
        value={currentSearch}
        class="search-input"
      />
      <svg class="search-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <circle cx="11" cy="11" r="8"></circle>
        <path d="m21 21-4.35-4.35"></path>
      </svg>
    </div>

    <!-- Genre Filter -->
    <div class="filter-group">
      <label for="genre-select">{getLabel('genre')}</label>
      <select id="genre-select" class="filter-select">
        <option value="all" selected={currentGenre === 'all'}>{getGenreLabel('all')}</option>
        {storyGenres.map((genre) => (
          <option value={genre} selected={currentGenre === genre}>
            {getGenreLabel(genre)}
          </option>
        ))}
      </select>
    </div>

    <!-- Sort -->
    <div class="filter-group">
      <label for="sort-select">{getLabel('sortBy')}</label>
      <select id="sort-select" class="filter-select">
        <option value="date" selected={currentSort === 'date'}>{getSortLabel('date')}</option>
        <option value="title" selected={currentSort === 'title'}>{getSortLabel('title')}</option>
        <option value="author" selected={currentSort === 'author'}>{getSortLabel('author')}</option>
      </select>
    </div>

    <!-- Group by Series -->
    <div class="filter-group">
      <label class="checkbox-label">
        <input 
          type="checkbox" 
          id="grouped-checkbox" 
          checked={currentGrouped === 'true'}
          class="grouped-checkbox"
        />
        <span class="checkbox-text">
          {getLabel('groupBySeries')}
        </span>
      </label>
    </div>

    <!-- Clear Filters -->
    <button id="clear-filters" class="clear-btn">
      {getLabel('clearFilters')}
    </button>
  </div>
</div>

<style>
  .story-filters {
    background: white;
    dark:bg-gray-800;
    border: 1px solid rgb(229, 231, 235);
    border-radius: 0.75rem;
    padding: 1.5rem;
    margin-bottom: 2rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
  }

  :global(.dark) .story-filters {
    background: rgb(31, 41, 55);
    border-color: rgb(75, 85, 99);
  }

  .filters-row {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    align-items: end;
  }

  .search-box {
    position: relative;
    flex: 1;
    min-width: 250px;
  }

  .search-input {
    width: 100%;
    padding: 0.75rem 2.5rem 0.75rem 1rem;
    border: 1px solid rgb(209, 213, 219);
    border-radius: 0.5rem;
    font-size: 0.875rem;
    transition: all 0.3s ease;
  }

  .search-input:focus {
    outline: none;
    border-color: rgb(147, 51, 234);
    box-shadow: 0 0 0 3px rgba(147, 51, 234, 0.1);
  }

  :global(.dark) .search-input {
    background: rgb(55, 65, 81);
    border-color: rgb(75, 85, 99);
    color: white;
  }

  .search-icon {
    position: absolute;
    right: 0.75rem;
    top: 50%;
    transform: translateY(-50%);
    color: rgb(156, 163, 175);
    pointer-events: none;
  }

  .filter-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .filter-group label {
    font-size: 0.875rem;
    font-weight: 500;
    color: rgb(55, 65, 81);
  }

  :global(.dark) .filter-group label {
    color: rgb(229, 231, 235);
  }

  .filter-select {
    padding: 0.75rem;
    border: 1px solid rgb(209, 213, 219);
    border-radius: 0.5rem;
    font-size: 0.875rem;
    background: white;
    cursor: pointer;
    transition: all 0.3s ease;
    min-width: 150px;
  }

  .filter-select:focus {
    outline: none;
    border-color: rgb(147, 51, 234);
    box-shadow: 0 0 0 3px rgba(147, 51, 234, 0.1);
  }

  :global(.dark) .filter-select {
    background: rgb(55, 65, 81);
    border-color: rgb(75, 85, 99);
    color: white;
  }

  .clear-btn {
    padding: 0.75rem 1.5rem;
    background: rgb(107, 114, 128);
    color: white;
    border: none;
    border-radius: 0.5rem;
    font-size: 0.875rem;
    cursor: pointer;
    transition: all 0.3s ease;
    white-space: nowrap;
  }

  .clear-btn:hover {
    background: rgb(75, 85, 99);
  }

  .checkbox-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    font-size: 0.875rem;
    color: rgb(55, 65, 81);
  }

  :global(.dark) .checkbox-label {
    color: rgb(229, 231, 235);
  }

  .grouped-checkbox {
    width: 1rem;
    height: 1rem;
    accent-color: rgb(147, 51, 234);
  }

  .checkbox-text {
    user-select: none;
  }

  @media (max-width: 768px) {
    .filters-row {
      flex-direction: column;
      align-items: stretch;
    }

    .search-box {
      min-width: unset;
    }

    .filter-group {
      flex-direction: row;
      align-items: center;
      justify-content: space-between;
    }

    .filter-select {
      min-width: 120px;
    }
  }
</style>

<script>
  // Client-side filtering functionality
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const genreSelect = document.getElementById('genre-select') as HTMLSelectElement;
    const sortSelect = document.getElementById('sort-select') as HTMLSelectElement;
    const groupedCheckbox = document.getElementById('grouped-checkbox') as HTMLInputElement;
    const clearBtn = document.getElementById('clear-filters');

    function updateURL() {
      const params = new URLSearchParams();
      
      if (searchInput.value.trim()) {
        params.set('search', searchInput.value.trim());
      }
      
      if (genreSelect.value !== 'all') {
        params.set('genre', genreSelect.value);
      }
      
      if (sortSelect.value !== 'date') {
        params.set('sort', sortSelect.value);
      }

      if (!groupedCheckbox.checked) {
        params.set('grouped', 'false');
      }

      const newURL = window.location.pathname + (params.toString() ? '?' + params.toString() : '');
      window.history.replaceState({}, '', newURL);
      
      // Trigger custom event for story list to update
      window.dispatchEvent(new CustomEvent('filtersChanged', {
        detail: {
          search: searchInput.value.trim(),
          genre: genreSelect.value,
          sort: sortSelect.value,
          grouped: groupedCheckbox.checked
        }
      }));
    }

    // Event listeners
    if (searchInput) {
      searchInput.addEventListener('input', () => {
        clearTimeout(parseInt(searchInput.dataset.timeout || '0'));
        searchInput.dataset.timeout = String(setTimeout(() => updateURL(), 300));
      });
    }

    if (genreSelect) {
      genreSelect.addEventListener('change', updateURL);
    }

    if (sortSelect) {
      sortSelect.addEventListener('change', updateURL);
    }

    if (groupedCheckbox) {
      groupedCheckbox.addEventListener('change', updateURL);
    }

    if (clearBtn) {
      clearBtn.addEventListener('click', () => {
        searchInput.value = '';
        genreSelect.value = 'all';
        sortSelect.value = 'date';
        groupedCheckbox.checked = true;
        updateURL();
      });
    }

    // Load URL parameters on page load
    const urlParams = new URLSearchParams(window.location.search);
    const searchParam = urlParams.get('search');
    const genreParam = urlParams.get('genre');
    const sortParam = urlParams.get('sort');
    const groupedParam = urlParams.get('grouped');
    
    if (searchParam) {
      searchInput.value = searchParam;
    }
    if (genreParam) {
      genreSelect.value = genreParam;
    }
    if (sortParam) {
      sortSelect.value = sortParam;
    }
    if (groupedParam === 'false') {
      groupedCheckbox.checked = false;
    }
  });
</script>
