---
import { t } from '../i18n';
import HeaderLink from './HeaderLink.astro';
import ThemeToggle from './ThemeToggle.astro';
import LanguageSwitcher from './LanguageSwitcher.astro';
import { createLangUrl } from '../utils/urls';

// Accept lang prop for multilingual support
const { lang = 'it' } = Astro.props;
const _ = (k) => t(lang, k);

// Determine if we're on stories/comics pages
const currentPath = Astro.url.pathname;
const isStoriesActive = currentPath.includes('/stories') || currentPath.includes('/comics') || currentPath.includes('/series');
const isHomeActive = currentPath === '/' || currentPath === `/${lang}` || currentPath === `/${lang}/`;
const isStoriesPageActive = currentPath.includes('/stories');
const isComicsPageActive = currentPath.includes('/comics');
---

<header>
	<nav>
		<h2>
			<a href={createLangUrl(lang)} class="logo-link">
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 180 64" width="56" height="25" class="logo" role="img" aria-labelledby="t">
					<title id="t">Logo: Penna & Parentesi Francesi Compatte</title>
					<!-- Parentesi francesi -->
					<text x="65" y="38" font-size="28" text-anchor="middle" font-family="serif" fill="currentColor">«</text>
					<!-- Penna -->
					<g fill="none" stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round">
						<path d="M90 8 104 22 90 56 76 22Z"/>
						<circle cx="90" cy="28" r="3.5" fill="currentColor" stroke="none"/>
					</g>
					<text x="115" y="38" font-size="28" text-anchor="middle" font-family="serif" fill="currentColor">»</text>
				</svg>
				<span class="logo-text">Narrarium</span>
			</a>
		</h2>
		<div class="internal-links">
			<HeaderLink href={createLangUrl(lang)} class={isHomeActive ? 'active rainbow' : ''}>
				{_('nav.home')}
			</HeaderLink>
			<div class="dropdown">
				<button class={`dropdown-toggle ${isStoriesActive ? 'active' : ''}`} aria-expanded="false" aria-haspopup="true">
					<span class={isStoriesActive ? 'rainbow' : ''}>{_('nav.stories')}</span>
					<svg class="dropdown-arrow" width="12" height="12" viewBox="0 0 12 12" fill="currentColor">
						<path d="M6 8.5L2.5 5h7L6 8.5z"/>
					</svg>
				</button>
				<div class="dropdown-menu">
					<a href={createLangUrl(lang, '/stories')} class={`dropdown-item ${isStoriesPageActive ? 'active rainbow' : ''}`}>
						{_('nav.stories')}
					</a>
					<a href={createLangUrl(lang, '/comics')} class={`dropdown-item ${isComicsPageActive ? 'active rainbow' : ''}`}>
						{_('nav.comics')}
					</a>
				</div>
			</div>
		</div>
		<div class="nav-controls">
			<LanguageSwitcher lang={lang} />
			<ThemeToggle />
		</div>
	</nav>
</header>
<style>
	header {
		margin: 0;
		padding: 0 1em;
		background: white;
		box-shadow: 0 2px 8px rgba(var(--black), 5%);
		transition: background-color 0.3s ease, box-shadow 0.3s ease;
	}
	
	/* Dark mode styles */
	:global(.dark) header {
		background: rgb(17, 24, 39);
		box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
	}
	
	h2 {
		margin: 0;
		font-size: 1em;
	}

	h2 a,
	h2 a.active {
		text-decoration: none;
		color: rgb(var(--black));
		transition: color 0.3s ease;
	}
	
	:global(.dark) h2 a {
		color: white;
	}
	
	/* Logo styles */
	.logo-link {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		padding: 0.5rem 0;
		transition: opacity 0.3s ease;
	}
	
	.logo-link:hover {
		opacity: 0.8;
	}
	
	.logo {
		color: rgb(var(--black));
		--logo-bg: white;
		transition: color 0.3s ease;
	}
	
	:global(.dark) .logo {
		color: rgb(229, 231, 235);
		--logo-bg: rgb(17, 24, 39);
	}
	
	.logo-text {
		font-weight: bold;
		font-size: 1.2rem;
	}
	
	@media (max-width: 720px) {
		.logo-text {
			display: none;
		}
		
		.logo-link {
			gap: 0;
		}
	}
	
	nav {
		display: flex;
		align-items: center;
		justify-content: space-between;
	}
	
	nav a {
		padding: 1em 0.5em;
		color: rgb(var(--black));
		border-bottom: 4px solid transparent;
		text-decoration: none;
		transition: color 0.3s ease, border-bottom-color 0.3s ease;
	}
	
	:global(.dark) nav a {
		color: rgb(229, 231, 235);
	}
	
	nav a.active {
		text-decoration: none;
		border-bottom-color: var(--accent);
	}

	/* Rainbow animation for active elements */
	.rainbow {
		background: linear-gradient(90deg, #ff0000, #ff8c00, #ffd700, #32cd32, #1e90ff, #8a2be2, #ff1493, #ff0000);
		background-size: 300% 100%;
		-webkit-background-clip: text;
		background-clip: text;
		color: transparent;
		-webkit-text-fill-color: transparent;
		animation: rainbow 2s linear infinite;
		font-weight: 600;
		border-bottom-color: transparent !important;
		display: inline-block;
	}

	/* Specific rules for button elements */
	button.rainbow {
		background: linear-gradient(90deg, #ff0000, #ff8c00, #ffd700, #32cd32, #1e90ff, #8a2be2, #ff1493, #ff0000) !important;
		background-size: 300% 100% !important;
		-webkit-background-clip: text !important;
		background-clip: text !important;
		color: transparent !important;
		-webkit-text-fill-color: transparent !important;
		animation: rainbow 2s linear infinite !important;
		font-weight: 600 !important;
		border-bottom: none !important;
		display: inline-flex !important;
	}

	.rainbow:hover {
		background: linear-gradient(90deg, #ff0000, #ff8c00, #ffd700, #32cd32, #1e90ff, #8a2be2, #ff1493, #ff0000);
		background-size: 300% 100%;
		-webkit-background-clip: text;
		background-clip: text;
		color: transparent;
		-webkit-text-fill-color: transparent;
		border-bottom-color: transparent !important;
	}

	/* Fix for SVG icons in rainbow elements */
	.rainbow svg,
	.rainbow:hover svg {
		-webkit-text-fill-color: initial;
		color: rgb(var(--black));
	}

	:global(.dark) .rainbow svg,
	:global(.dark) .rainbow:hover svg {
		color: rgb(229, 231, 235);
	}
	
	.nav-controls {
		display: flex;
		align-items: center;
		gap: 1rem;
	}
	
	@media (max-width: 720px) {
		.nav-controls {
			gap: 0.5rem;
		}
	}

	/* Dropdown styles */
	.dropdown {
		position: relative;
		display: inline-block;
	}

	.dropdown-toggle {
		display: flex;
		align-items: center;
		gap: 0.25rem;
		padding: 1em 0.5em;
		color: rgb(var(--black));
		background: none;
		border: none;
		border-bottom: 4px solid transparent;
		cursor: pointer;
		font-size: inherit;
		font-family: inherit;
		text-decoration: none;
		transition: color 0.3s ease, border-bottom-color 0.3s ease;
	}

	:global(.dark) .dropdown-toggle {
		color: rgb(229, 231, 235);
	}

	.dropdown-toggle:hover {
		color: var(--accent);
	}

	.dropdown-toggle[aria-expanded="true"]:not(.rainbow) {
		border-bottom-color: var(--accent);
	}

	/* Force no border for rainbow elements - highest specificity */
	.dropdown-toggle.rainbow {
		border-bottom: none !important;
	}

	.dropdown-toggle.rainbow[aria-expanded="true"],
	.dropdown-toggle[aria-expanded="true"].rainbow {
		border-bottom: none !important;
	}

	.dropdown-toggle.active {
		border-bottom-color: transparent;
	}

	@keyframes rainbow {
		0% {
			background-position: 0% 50%;
		}
		100% {
			background-position: 300% 50%;
		}
	}

	.dropdown-arrow {
		transition: transform 0.2s ease;
	}

	.dropdown-toggle[aria-expanded="true"] .dropdown-arrow {
		transform: rotate(180deg);
	}

	.dropdown-menu {
		position: absolute;
		top: 100%;
		left: 0;
		background: white;
		border: 1px solid rgb(229, 231, 235);
		border-radius: 0.5rem;
		box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
		min-width: 160px;
		z-index: 50;
		opacity: 0;
		visibility: hidden;
		transform: translateY(-10px);
		transition: opacity 0.2s ease, visibility 0.2s ease, transform 0.2s ease;
	}

	:global(.dark) .dropdown-menu {
		background: rgb(31, 41, 55);
		border-color: rgb(75, 85, 99);
	}

	.dropdown.open .dropdown-menu {
		opacity: 1;
		visibility: visible;
		transform: translateY(0);
	}

	.dropdown-item {
		display: block;
		padding: 0.75rem 1rem;
		color: rgb(var(--black));
		text-decoration: none;
		transition: background-color 0.2s ease, color 0.2s ease;
	}

	:global(.dark) .dropdown-item {
		color: rgb(229, 231, 235);
	}

	.dropdown-item:hover {
		background-color: rgb(243, 244, 246);
		color: var(--accent);
	}

	:global(.dark) .dropdown-item:hover {
		background-color: rgb(55, 65, 81);
	}

	.dropdown-item:first-child {
		border-radius: 0.5rem 0.5rem 0 0;
	}

	.dropdown-item:last-child {
		border-radius: 0 0 0.5rem 0.5rem;
	}

	.dropdown-item.active {
		background-color: rgb(243, 244, 246);
		border-bottom-color: transparent;
	}

	:global(.dark) .dropdown-item.active {
		background-color: rgb(55, 65, 81);
	}

	@media (max-width: 720px) {
		.dropdown-menu {
			right: 0;
			left: auto;
		}
	}
</style>

<script>
	// Dropdown functionality
	document.addEventListener('DOMContentLoaded', function() {
		const dropdown = document.querySelector('.dropdown');
		const toggle = document.querySelector('.dropdown-toggle');
		
		if (dropdown && toggle) {
			// Toggle dropdown on click
			toggle.addEventListener('click', function(e) {
				e.preventDefault();
				const isOpen = dropdown.classList.contains('open');
				
				// Close all other dropdowns first
				document.querySelectorAll('.dropdown.open').forEach(d => {
					d.classList.remove('open');
					d.querySelector('.dropdown-toggle')?.setAttribute('aria-expanded', 'false');
				});
				
				// Toggle current dropdown
				if (!isOpen) {
					dropdown.classList.add('open');
					toggle.setAttribute('aria-expanded', 'true');
				}
			});
			
			// Close dropdown when clicking outside
			document.addEventListener('click', function(e) {
				if (e.target && !dropdown.contains(e.target as Node)) {
					dropdown.classList.remove('open');
					toggle.setAttribute('aria-expanded', 'false');
				}
			});
			
			// Close dropdown on escape key
			document.addEventListener('keydown', function(e) {
				if (e.key === 'Escape') {
					dropdown.classList.remove('open');
					toggle.setAttribute('aria-expanded', 'false');
				}
			});
		}
	});
</script>
