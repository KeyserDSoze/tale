---
import { createLangUrl } from '../utils/urls';
import { LOCALES } from '../i18n';

const { lang } = Astro.props;

// Get the current path without the language prefix
const currentPath = Astro.url.pathname;
const pathWithoutLang = currentPath.replace(/^\/[a-z]{2}(\/|$)/, '/').replace(/\/$/, '') || '/';

const languages = [
  { code: 'it', flag: 'ðŸ‡®ðŸ‡¹', name: 'Italiano' },
  { code: 'en', flag: 'ðŸ‡¬ðŸ‡§', name: 'English' },
  { code: 'es', flag: 'ðŸ‡ªðŸ‡¸', name: 'EspaÃ±ol' },
  { code: 'fr', flag: 'ðŸ‡«ðŸ‡·', name: 'FranÃ§ais' },
  { code: 'de', flag: 'ðŸ‡©ðŸ‡ª', name: 'Deutsch' },
  { code: 'zh', flag: 'ðŸ‡¨ðŸ‡³', name: 'ä¸­æ–‡' },
  { code: 'ja', flag: 'ðŸ‡¯ðŸ‡µ', name: 'æ—¥æœ¬èªž' },
];
---

<div class="language-switcher">
  <button 
    id="language-toggle" 
    class="language-button"
    aria-label="Change language"
    title="Change language"
  >
    <span class="current-flag">{languages.find(l => l.code === lang)?.flag}</span>
    <svg class="chevron" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <polyline points="6,9 12,15 18,9"></polyline>
    </svg>
  </button>
  
  <div id="language-menu" class="language-menu">
    {languages.map((language) => (
      <a 
        href={createLangUrl(language.code, pathWithoutLang === '/' ? '' : pathWithoutLang)} 
        class={`language-option ${lang === language.code ? 'active' : ''}`}
        title={language.name}
      >
        <span class="flag">{language.flag}</span>
        <span class="name">{language.name}</span>
      </a>
    ))}
  </div>
</div>

<script>
  // Language switcher functionality
  document.addEventListener('DOMContentLoaded', () => {
    const toggle = document.getElementById('language-toggle');
    const menu = document.getElementById('language-menu');
    
    if (toggle && menu) {
      toggle.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        // Toggle menu visibility
        const isShowing = menu.classList.contains('show');
        
        if (!isShowing) {
          // Show menu first
          menu.classList.add('show');
          
          // Check if menu goes outside viewport on mobile
          const rect = menu.getBoundingClientRect();
          const viewportWidth = window.innerWidth;
          
          if (rect.right > viewportWidth - 10) {
            // Menu extends beyond viewport, adjust position
            const overflow = rect.right - viewportWidth + 20;
            menu.style.transform = `translateX(-${overflow}px)`;
          } else {
            menu.style.transform = '';
          }
        } else {
          menu.classList.remove('show');
          menu.style.transform = '';
        }
      });
      
      // Close menu when clicking outside
      document.addEventListener('click', (e) => {
        if (!toggle.contains(e.target as Node) && !menu.contains(e.target as Node)) {
          menu.classList.remove('show');
          menu.style.transform = '';
        }
      });
      
      // Close menu on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          menu.classList.remove('show');
          menu.style.transform = '';
        }
      });
      
      // Reset position on window resize
      window.addEventListener('resize', () => {
        if (menu.classList.contains('show')) {
          menu.style.transform = '';
          
          setTimeout(() => {
            const rect = menu.getBoundingClientRect();
            const viewportWidth = window.innerWidth;
            
            if (rect.right > viewportWidth - 10) {
              const overflow = rect.right - viewportWidth + 20;
              menu.style.transform = `translateX(-${overflow}px)`;
            }
          }, 10);
        }
      });
    }
  });
</script>

<style>
  .language-switcher {
    position: relative;
    display: inline-block;
  }
  
  .language-button {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    padding: 0.5rem;
    background: transparent;
    border: 1px solid rgb(var(--accent-light));
    border-radius: 0.5rem;
    color: rgb(var(--accent));
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.875rem;
  }
  
  .language-button:hover {
    background: rgb(var(--accent-light));
    border-color: rgb(var(--accent));
  }
  
  :global(.dark) .language-button {
    border-color: rgba(255, 255, 255, 0.2);
    color: white;
  }
  
  :global(.dark) .language-button:hover {
    background: rgba(255, 255, 255, 0.1);
    border-color: rgba(255, 255, 255, 0.3);
  }
  
  .current-flag {
    font-size: 1rem;
    line-height: 1;
  }
  
  .chevron {
    width: 14px;
    height: 14px;
    transition: transform 0.3s ease;
  }
  
  .language-button:hover .chevron {
    transform: rotate(180deg);
  }
  
  .language-menu {
    position: absolute;
    top: 100%;
    right: 0;
    margin-top: 0.5rem;
    background: white;
    border: 1px solid rgb(var(--accent-light));
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    min-width: 180px;
    max-width: 220px;
    width: max-content;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.3s ease;
    z-index: 50;
  }
  
  :global(.dark) .language-menu {
    background: rgb(17, 24, 39);
    border-color: rgba(255, 255, 255, 0.2);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3), 0 2px 4px -1px rgba(0, 0, 0, 0.2);
  }
  
  .language-menu.show {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }
  
  .language-option {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem;
    text-decoration: none;
    color: rgb(var(--black));
    transition: background-color 0.2s ease;
    border-radius: 0.375rem;
    margin: 0.25rem;
  }
  
  .language-option:hover {
    background: rgb(var(--accent-light));
  }
  
  .language-option.active {
    background: rgb(var(--accent));
    color: white;
  }
  
  :global(.dark) .language-option {
    color: white;
  }
  
  :global(.dark) .language-option:hover {
    background: rgba(255, 255, 255, 0.1);
  }
  
  :global(.dark) .language-option.active {
    background: rgb(var(--accent));
  }
  
  .flag {
    font-size: 1rem;
    line-height: 1;
  }
  
  .name {
    font-size: 0.875rem;
    font-weight: 500;
  }
  
  /* Mobile responsiveness */
  @media (max-width: 768px) {
    .language-menu {
      right: 0;
      left: auto;
      min-width: 200px;
      max-width: 280px;
      width: max-content;
      /* Assicurati che non esca dal viewport */
      transform-origin: top right;
    }
    
    .language-option {
      padding: 1rem 1.25rem;
      white-space: nowrap;
    }
    
    .name {
      font-size: 0.9rem;
      font-weight: 500;
    }
    
    .flag {
      font-size: 1.1rem;
      flex-shrink: 0;
    }
  }
  
  @media (max-width: 480px) {
    .language-menu {
      min-width: 180px;
      max-width: calc(100vw - 2rem);
      /* Posiziona a destra del pulsante ma rimani nel viewport */
      right: -0.5rem;
    }
    
    .language-option {
      padding: 0.875rem 1rem;
    }
    
    .name {
      font-size: 0.85rem;
    }
  }
</style>
