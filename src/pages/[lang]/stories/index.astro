---
import BaseLayout from "../../../layouts/BaseLayout.astro";
import Header from "../../../components/Header.astro";
import Footer from "../../../components/Footer.astro";
import StoryFilter from "../../../components/StoryFilter.astro";
import FilterableStoryList from "../../../components/FilterableStoryList.astro";
import { t, LOCALES } from "../../../i18n";
import { getCollection } from 'astro:content';
import { getSeriesMetadataFromItalian } from "../../../utils/series.ts";

export function getStaticPaths() {
  return LOCALES.map((lang) => ({ params: { lang } }));
}

const { lang } = Astro.params;
const _ = (k: any) => t(lang, k);

// Get all stories for this language
const allStories = await getCollection('stories', (entry) => 
  entry.data.lang === lang && entry.data.type === 'story'
);

// Enrich stories with metadata from Italian chapter 1
const enrichedStories = await Promise.all(
  allStories.map(async (story) => {
    if (story.data.taleid) {
      // For series stories, get metadata from Italian chapter 1 (author, type, genre) 
      // and localized titles from current language
      const metadata = await getSeriesMetadataFromItalian(story.data.taleid, lang);
      return {
        ...story,
        data: {
          ...story.data,
          author: metadata.author,
          genre: metadata.genre,
          maintitle: metadata.maintitle,
          maindescription: metadata.maindescription,
          type: metadata.type
        }
      };
    }
    // For standalone stories, keep original data
    return story;
  })
);

// Group stories by series (taleid) for counting
const seriesGroups = new Map<string, any[]>();
for (const story of enrichedStories) {
  const taleid = story.data.taleid || story.id;
  if (!seriesGroups.has(taleid)) {
    seriesGroups.set(taleid, []);
  }
  seriesGroups.get(taleid)!.push(story);
}

const totalSeries = seriesGroups.size;
const totalStories = enrichedStories.length;

// Get URL parameters for initial filter state
const url = Astro.url;
const searchParams = url.searchParams;
const currentGenre = searchParams.get('genre') || 'all';
const currentSort = searchParams.get('sort') || 'date';
const currentSearch = searchParams.get('search') || '';
const currentGrouped = searchParams.get('grouped') || 'true';
---

<BaseLayout 
  title={`${_('nav.stories')} â€” Tale`} 
  description={_('pages.stories.description')}
  lang={lang}
>
  <Header lang={lang} />

  <!-- Hero Section -->
  <section class="relative bg-gradient-to-br from-purple-600 via-purple-700 to-indigo-800 dark:from-purple-800 dark:via-purple-900 dark:to-gray-900 transition-colors duration-300">
    <!-- Background Pattern -->
    <div class="absolute inset-0 opacity-10">
      <svg class="w-full h-full" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
        <defs>
          <pattern id="storyPattern" x="0" y="0" width="20" height="20" patternUnits="userSpaceOnUse">
            <path d="M10,2 L18,10 L10,18 L2,10 Z" fill="none" stroke="currentColor" stroke-width="0.5"/>
            <circle cx="10" cy="10" r="2" fill="currentColor" opacity="0.3"/>
          </pattern>
        </defs>
        <rect x="0" y="0" width="100" height="100" fill="url(#storyPattern)"/>
      </svg>
    </div>
    
    <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20">
      <div class="text-center">
        <h1 class="text-5xl md:text-6xl font-bold text-white mb-6 tracking-tight">
          {_('nav.stories')}
        </h1>
        <div class="flex justify-center">
          <div class="bg-white/10 backdrop-blur-sm rounded-full px-6 py-3 text-white font-medium">
            <span id="story-count">
              {totalSeries} {_('common.seriesAvailable')}
            </span>
            <span id="story-count-individual" style="display: none;">
              {totalStories} {_('common.storiesAvailable')}
            </span>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Main Content -->
  <main class="bg-white dark:bg-gray-900 transition-colors duration-300">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
      
      <!-- Filter Controls -->
      <StoryFilter 
        lang={lang}
        currentGenre={currentGenre}
        currentSort={currentSort}
        currentSearch={currentSearch}
        currentGrouped={currentGrouped}
      />

      <!-- Stories List -->
      <FilterableStoryList 
        stories={enrichedStories as any}
        lang={lang}
        showType="stories"
      />

      {enrichedStories.length === 0 && (
        <div class="text-center py-16">
          <div class="max-w-md mx-auto">
            <svg class="mx-auto h-16 w-16 text-gray-400 mb-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"/>
            </svg>
            <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
              {_('common.noStoriesAvailable')}
            </h3>
            <p class="text-gray-500 dark:text-gray-400">
              {_('common.comeBackSoonStories')}
            </p>
          </div>
        </div>
      )}

    </div>
  </main>

  <Footer lang={lang} />
</BaseLayout>
