---
import { createLangUrl } from '../utils/urls';
import { t } from '../i18n';

const {
  lang = 'en',
  title = t(lang as any, 'site.name'),
  description = t(lang as any, 'site.description'),
  alternates = ['it', 'en', 'es', 'fr', 'de', 'zh', 'ja'],
} = Astro.props;

const siteUrl = Astro.site?.origin || 'http://localhost:4321';
const basePath = import.meta.env.BASE_URL || '';
---

<html lang={lang} class="min-h-full">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content={description} />
    <meta name="generator" content={Astro.generator} />
    <meta name="robots" content="index, follow" />
    <meta name="author" content="Tale" />
    <meta name="language" content={lang} />
    <meta name="theme-color" content="#1f2937" />
    <meta name="msapplication-TileColor" content="#1f2937" />
    
    <!-- Canonical URL -->
    <link rel="canonical" href={`${siteUrl}${Astro.url.pathname}`} />
    
    <!-- SEO Meta Tags -->
    <title>{title}</title>
    
    <!-- Open Graph Meta Tags -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={`${siteUrl}${Astro.url.pathname}`} />
    <meta property="og:site_name" content={t(lang as any, 'site.name')} />
    <meta property="og:locale" content={lang} />
    {alternates.filter(l => l !== lang).map((l) => (
      <meta property="og:locale:alternate" content={l} />
    ))}
    
    <!-- X (Twitter) Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:site" content="@tale" />
    <meta name="twitter:creator" content="@tale" />
    
    <!-- Hreflang for SEO -->
    {alternates.map((l) => (
      <link rel="alternate" hreflang={l} href={`${siteUrl}${createLangUrl(l)}`} />
    ))}
    <link rel="alternate" hreflang="x-default" href={`${siteUrl}${basePath}/`} />
    
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href={`${basePath}/favicon.svg`} />
    <link rel="shortcut icon" href={`${basePath}/favicon.svg`} />
    <link rel="apple-touch-icon" href={`${basePath}/favicon.svg`} />
    
    <!-- Fonts -->
    <link rel="preload" href={`${basePath}/fonts/atkinson-regular.woff`} as="font" type="font/woff" crossorigin />
    <link rel="preload" href={`${basePath}/fonts/atkinson-bold.woff`} as="font" type="font/woff" crossorigin />
    
    <!-- Structured Data (JSON-LD) -->
    <script type="application/ld+json" is:inline>
      {
        "@context": "https://schema.org",
        "@type": "WebSite",
        "name": "Tale",
        "alternateName": "Tale - Stories and Thoughts",
        "url": `${siteUrl}`,
        "description": `${description}`,
        "inLanguage": `${lang}`,
        "author": {
          "@type": "Person",
          "name": "Tale"
        },
        "publisher": {
          "@type": "Organization",
          "name": "Tale"
        }
      }
    </script>
    
    <!-- Dark mode script - must run before body renders -->
    <script is:inline>
      // Prevent flash of unstyled content (FOUC)
      const getThemePreference = () => {
        const stored = localStorage.getItem('theme');
        if (stored) return stored;
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      };
      
      const theme = getThemePreference();
      const isDark = theme === 'dark' || 
                    (theme === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches);
      
      if (isDark) {
        document.documentElement.classList.add('dark');
      }
    </script>
  </head>
  <body class="min-h-screen bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 transition-colors duration-300">
    <slot />
  </body>
</html>
